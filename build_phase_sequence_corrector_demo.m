function build_phase_corrector_model()
% Build a Simulink model with a Three-Phase Source, Phase Sequence Corrector,
% and load â€” fully connected for simulation.

model = 'PhaseSequenceCorrectorModel';
if bdIsLoaded(model)
    close_system(model,0);
end
new_system(model);
open_system(model);

x0 = 30; y0 = 30;

% Three-phase source
add_block('powerlib/Sources/Three-Phase Source', ...
    [model '/ThreePhaseSource'], ...
    'Position',[x0 y0 x0+60 y0+60]);

% Ground & neutral
add_block('powerlib/Elements/Ground', ...
    [model '/Ground'], ...
    'Position',[x0 y0+100 x0+30 y0+130]);
add_block('powerlib/Elements/Neutral', ...
    [model '/Neutral'], ...
    'Position',[x0+100 y0+100 x0+130 y0+130]);
add_line(model,'Neutral/1','Ground/1');

% R-L load
add_block('powerlib/Elements/Series RLC Branch', ...
    [model '/Load'], ...
    'BranchType','RL', ...
    'Position',[x0+650 y0 x0+700 y0+100]);

% Voltage measurements
add_block('powerlib/Measurements/Voltage Measurement', ...
    [model '/VaMeas'], 'Position',[x0+150 y0 x0+190 y0+40]);
add_block('powerlib/Measurements/Voltage Measurement', ...
    [model '/VbMeas'], 'Position',[x0+150 y0+60 x0+190 y0+100]);
add_block('powerlib/Measurements/Voltage Measurement', ...
    [model '/VcMeas'], 'Position',[x0+150 y0+120 x0+190 y0+160]);

% PS-Simulink converters
add_block('simscape/Utilities/PS-Simulink Converter', ...
    [model '/PS2SL_A'], 'Position',[x0+220 y0 x0+260 y0+40]);
add_block('simscape/Utilities/PS-Simulink Converter', ...
    [model '/PS2SL_B'], 'Position',[x0+220 y0+60 x0+260 y0+100]);
add_block('simscape/Utilities/PS-Simulink Converter', ...
    [model '/PS2SL_C'], 'Position',[x0+220 y0+120 x0+260 y0+160]);

% MATLAB Function block for correction
add_block('simulink/User-Defined Functions/MATLAB Function', ...
    [model '/PhaseSequenceCorrector'], ...
    'Position',[x0+300 y0 x0+450 y0+150]);
set_param([model '/PhaseSequenceCorrector'],'Script', [
'function [Va_o, Vb_o, Vc_o, SeqFlag] = PhaseSequenceCorrector(Va, Vb, Vc)', newline, ...
'%#codegen', newline, ...
'persistent theta_prev dtheta_filt init', newline, ...
'if isempty(init)', newline, ...
'    theta_prev = 0;', newline, ...
'    dtheta_filt = 0;', newline, ...
'    init = true;', newline, ...
'end', newline, ...
'alpha = (2/3) * (Va - 0.5*Vb - 0.5*Vc);', newline, ...
'beta  = (2/3) * (0.8660254037844386) * (Vb - Vc);', newline, ...
'theta = atan2(beta, alpha);', newline, ...
'dtheta = theta - theta_prev;', newline, ...
'if dtheta >  pi; dtheta = dtheta - 2*pi; elseif dtheta < -pi; dtheta = dtheta + 2*pi; end', newline, ...
'theta_prev = theta;', newline, ...
'alpha_f = 0.05;', newline, ...
'dtheta_filt = (1 - alpha_f)*dtheta_filt + alpha_f*dtheta;', newline, ...
'if dtheta_filt >= 0', newline, ...
'    SeqFlag = int8(1); Va_o = Va; Vb_o = Vb; Vc_o = Vc;', newline, ...
'else', newline, ...
'    SeqFlag = int8(-1); Va_o = Va; Vb_o = Vc; Vc_o = Vb;', newline, ...
'end', newline ...
]);

% SL-PS converters
add_block('simscape/Utilities/Simulink-PS Converter', ...
    [model '/SL2PS_A'], 'Position',[x0+480 y0 x0+520 y0+40]);
add_block('simscape/Utilities/Simulink-PS Converter', ...
    [model '/SL2PS_B'], 'Position',[x0+480 y0+60 x0+520 y0+100]);
add_block('simscape/Utilities/Simulink-PS Converter', ...
    [model '/SL2PS_C'], 'Position',[x0+480 y0+120 x0+520 y0+160]);

% Controlled voltage sources
add_block('powerlib/Sources/Controlled Voltage Source', ...
    [model '/CVS_A'], 'Position',[x0+550 y0 x0+590 y0+40]);
add_block('powerlib/Sources/Controlled Voltage Source', ...
    [model '/CVS_B'], 'Position',[x0+550 y0+60 x0+590 y0+100]);
add_block('powerlib/Sources/Controlled Voltage Source', ...
    [model '/CVS_C'], 'Position',[x0+550 y0+120 x0+590 y0+160]);

% Wiring
add_line(model,'VaMeas/1','PS2SL_A/1');
add_line(model,'VbMeas/1','PS2SL_B/1');
add_line(model,'VcMeas/1','PS2SL_C/1');
add_line(model,'PS2SL_A/1','PhaseSequenceCorrector/1');
add_line(model,'PS2SL_B/1','PhaseSequenceCorrector/2');
add_line(model,'PS2SL_C/1','PhaseSequenceCorrector/3');
add_line(model,'PhaseSequenceCorrector/1','SL2PS_A/1');
add_line(model,'PhaseSequenceCorrector/2','SL2PS_B/1');
add_line(model,'PhaseSequenceCorrector/3','SL2PS_C/1');
add_line(model,'SL2PS_A/1','CVS_A/1');
add_line(model,'SL2PS_B/1','CVS_B/1');
add_line(model,'SL2PS_C/1','CVS_C/1');
add_line(model,'CVS_A/+','Load/1');
add_line(model,'CVS_B/+','Load/2');
add_line(model,'CVS_C/+','Load/3');
add_line(model,'Neutral/1','CVS_A/-');
add_line(model,'Neutral/1','CVS_B/-');
add_line(model,'Neutral/1','CVS_C/-');

save_system(model);
disp(['Model created: ' model]);
open_system(model);
end
